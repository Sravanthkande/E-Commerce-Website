from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from . import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('store.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

from django.db import models

# Category Model
class Category(models.Model):
    name = models.CharField(max_length=50)

    @staticmethod
    def get_all_categories():
        return Category.objects.all()

    def __str__(self):
        return self.name


# Customer Model
class Customer(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    phone = models.CharField(max_length=10)
    email = models.EmailField()
    password = models.CharField(max_length=100)

    def register(self):
        self.save()

    @staticmethod
    def get_customer_by_email(email):
        try:
            return Customer.objects.get(email=email)
        except Customer.DoesNotExist:
            return None

    def isExists(self):
        return Customer.objects.filter(email=self.email).exists()


# Products Model
class Products(models.Model):
    name = models.CharField(max_length=60)
    price = models.IntegerField(default=0)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, default=1)
    description = models.CharField(max_length=250, default='', blank=True, null=True)
    image = models.ImageField(upload_to='uploads/products/')

    @staticmethod
    def get_products_by_id(ids):
        return Products.objects.filter(id__in=ids)

    @staticmethod
    def get_all_products():
        return Products.objects.all()

    @staticmethod
    def get_all_products_by_categoryid(category_id):
        return Products.objects.filter(category=category_id) if category_id else Products.get_all_products()


# Order Model
class Order(models.Model):
    product = models.ForeignKey(Products, on_delete=models.CASCADE)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    price = models.IntegerField()
    address = models.CharField(max_length=50, default='', blank=True)
    phone = models.CharField(max_length=50, default='', blank=True)
    date = models.DateField(default=datetime.datetime.today)
    status = models.BooleanField(default=False)

    def placeOrder(self):
        self.save()

    @staticmethod
    def get_orders_by_customer(customer_id):
        return Order.objects.filter(customer=customer_id).order_by('-date')

from django.shortcuts import render, redirect, HttpResponseRedirect
from store.models.product import Products
from store.models.category import Category
from store.models.customer import Customer
from store.models.orders import Order
from django.contrib.auth.hashers import check_password, make_password
from django.views import View


class Index(View):
    def post(self, request):
        product = request.POST.get('product')
        remove = request.POST.get('remove')
        cart = request.session.get('cart', {})

        if cart.get(product):
            if remove:
                cart[product] = cart[product] - 1
                if cart[product] == 0:
                    cart.pop(product)
            else:
                cart[product] += 1
        else:
            cart[product] = 1

        request.session['cart'] = cart
        return redirect('homepage')

    def get(self, request):
        return HttpResponseRedirect(f'/store{request.get_full_path()[1:]}')


def store(request):
    cart = request.session.get('cart', {})
    request.session['cart'] = cart
    categoryID = request.GET.get('category')
    products = Products.get_all_products_by_categoryid(categoryID) if categoryID else Products.get_all_products()
    categories = Category.get_all_categories()

    data = {'products': products, 'categories': categories}
    return render(request, 'index.html', data)


class Signup(View):
    def get(self, request):
        return render(request, 'signup.html')

    def post(self, request):
        postData = request.POST
        customer = Customer(
            first_name=postData.get('firstname'),
            last_name=postData.get('lastname'),
            phone=postData.get('phone'),
            email=postData.get('email'),
            password=make_password(postData.get('password'))
        )
        error_message = self.validateCustomer(customer)

        if not error_message:
            customer.register()
            return redirect('homepage')
        else:
            data = {'error': error_message, 'values': postData}
            return render(request, 'signup.html', data)

    def validateCustomer(self, customer):
        if not customer.first_name:
            return "Please Enter your First Name"
        elif len(customer.first_name) < 3:
            return 'First Name must be 3 char long or more'
        elif not customer.last_name:
            return 'Please Enter your Last Name'
        elif len(customer.last_name) < 3:
            return 'Last Name must be 3 char long or more'
        elif not customer.phone:
            return 'Enter your Phone Number'
        elif len(customer.phone) != 10:
            return 'Phone Number must be 10 digits long'
        elif Customer.objects.filter(email=customer.email).exists():
            return 'Email Address Already Registered'
        return None

